import pandas as pd
from sklearn.model_selection import train_test_split
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn import model_selection
import numpy as np
from sklearn import ensemble
from sklearn import metrics
from sklearn.model_selection import GridSearchCV
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import KFold
from sklearn.inspection import partial_dependence
from scipy.interpolate import splev, splrep
from sklearn.inspection import plot_partial_dependence, permutation_importance
import warnings

warnings.filterwarnings("ignore")
plt.rcParams['font.sans-serif'] = ['Times New Roman']
plt.rcParams['axes.unicode_minus'] = False
plt.rcParams['figure.dpi'] = 200
data = pd.read_csv(r'--')
x_columns = []

for x in data.columns:
    if x not in ['Lake_id', 'target']:
        x_columns.append(x)
X = data[x_columns]
# print(X)

y = data['target']
# print(y)

kf = KFold(n_splits=12, shuffle=True, random_state=1234)

for train_index, valid_index in kf.split(X, y):

    X_train, X_test = X.iloc[train_index], X.iloc[valid_index]
    y_train, y_test = y[train_index], y[valid_index]

Regressor = ensemble.RandomForestClassifier(n_estimators=100, max_depth=7, min_samples_split=2, random_state=12
                                            , min_weight_fraction_leaf=0.1)

Regressor.fit(X_train, y_train)
pred1 = Regressor.predict(X_test)
print(pred1)
acc_train = Regressor.score(X_train, y_train)
acc_test = Regressor.score(X_test, y_test)
importance = Regressor.feature_importances_
Impt_Series = pd.Series(importance, index=X_train.columns)
dataplot = Impt_Series.sort_values(ascending=True)
dataplot.plot(kind='barh', color='k', alpha=0.7)
plt.subplots_adjust(left=0.37, right=0.99)
plt.tick_params(labelsize=14)
